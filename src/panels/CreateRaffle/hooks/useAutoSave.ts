// src/hooks/useAutoSaveRaffle.ts
import { useEffect, useRef, useState } from 'react';
import debounce from 'lodash.debounce';
import { rafflesApi } from '@/api/raffle';
import { CreateRaffleRequest, UpdateRaffleRequest } from '@/types/raffle';
import { FormData } from '../types';
import { RaffleCard } from '@/types/raffle'; // —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ RaffleCard
import { usePlatformContext } from '@/contexts/PlatformContext';

export function useAutoSaveRaffle(
  formData: FormData,
  debounceMs = 1000
): string | undefined {
  const [draftId, setDraftId] = useState<string>();
  const { userId } = usePlatformContext();

  // 1. –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫
  useEffect(() => {
    const createDraft = async () => {
      const now = new Date().toISOString();

      if (!userId) {
        console.error('vk_user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º payload —Ä–æ–≤–Ω–æ –ø–æ –Ω–æ–≤–æ–º—É –ø—Ä–∏–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const payload = {
        vk_user_id: userId,
        name: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞',
        community_id: '213206326',
        contest_text: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞',
        photos: [],
        require_community_subscription: true,
        require_telegram_subscription: false,
        telegram_channel: null,
        required_communities: [],
        partner_tags: [],
        winners_count: 1,
        blacklist_participants: [],
        start_date: '2025-07-09T14:33:00',
        end_date: '2025-08-09T11:33:00',
        max_participants: null,
        publish_results: true,
        hide_participants_count: false,
        exclude_me: false,
        exclude_admins: false,
      };

      console.log('[AUTO-SAVE] Payload –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–∞ –±—ç–∫:', payload);

      try {
        const response = await rafflesApi.createRaffleCard(payload);
        setDraftId(response.raffleId || response.id);
        console.log('–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω, ID =', response.raffleId || response.id);
      } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫:', err);
      }
    };

    createDraft();
  }, [userId]);

  // 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–µ–±–∞—É–Ω—Å-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è patch
  const debouncedUpdate = useRef(
    debounce(async (id: string, data: CreateRaffleRequest) => {
      console.log('‚è≥ PUT updateRaffle', id, data);
      try {
        const { raffle } = await rafflesApi.updateRaffle(id, data);
        console.log('‚úÖ Update successful', raffle);
      } catch (err) {
        console.error('‚ùå Update error', err);
      }
    }, debounceMs)
  ).current;

  // 3) –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ formData —à–ª—ë–º –ø–æ–ª–Ω—ã–π PUT (—Ç—Ä–µ–±—É–µ—Ç –≤–µ—Å—å CreateRaffleRequest)
  useEffect(() => {
    if (!draftId) return;
    console.log('üìù formData –∏–∑–º–µ–Ω–∏–ª—Å—è:', formData);

    const now = new Date().toLocaleString('ru-RU', {
      day: '2-digit', month: '2-digit', year: 'numeric',
      hour: '2-digit', minute: '2-digit'
    });

    const payload: CreateRaffleRequest = {
      raffleId:         draftId,
      name:             formData.giveawayName,
      textRaffleState:  '–ê–∫—Ç–∏–≤–Ω–æ',
      winnersCount:     Number(formData.numberWinners) || 0,
      mode:             formData.endByParticipants ? 'members' : 'time',
      memberCount:      formData.memberMax || '',
      timeLeft:         '',
      progress:         0,  // –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—ë –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
      lastModified:     now,
      modifiedBy:       '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      status–°ommunity:  'connected',
      statusNestedCard: 'green',
      statusNestedText: '',
      nickname:         '',  // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å `@${‚Ä¶}`
      membersCountNested:'',
      adminType:        'admin',
    };

    debouncedUpdate(draftId, payload);
  }, [draftId, formData, debouncedUpdate]);

  // 4) –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî ¬´—Å–ª–∏–≤–∞–µ–º¬ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤
  useEffect(() => {
    return () => {
      debouncedUpdate.flush();
    };
  }, [debouncedUpdate]);

  return draftId;
}
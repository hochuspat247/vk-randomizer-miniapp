// src/hooks/useAutoSaveRaffle.ts
import { useEffect, useRef, useState } from 'react';
import debounce from 'lodash.debounce';
import { rafflesApi } from '@/api/raffle';
import { CreateRaffleRequest, UpdateRaffleRequest } from '@/types/raffle';
import { FormData } from '../types';
import { RaffleCard } from '@/types/raffle'; // —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ RaffleCard

export function useAutoSaveRaffle(
  formData: FormData,
  debounceMs = 1000
): string | undefined {
  const [draftId, setDraftId] = useState<string>();

  // 1. –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫
  useEffect(() => {
    const createDraft = async () => {
      const now = new Date().toLocaleString('ru-RU', {
        day: '2-digit', month: '2-digit', year: 'numeric',
        hour: '2-digit', minute: '2-digit'
      });

      const payload: CreateRaffleRequest = {
        raffleId:         String(Date.now()),
        name:             '',
        textRaffleState:  '–ê–∫—Ç–∏–≤–Ω–æ',
        winnersCount:     0,
        mode:             'time',
        memberCount:      undefined,
        timeLeft:         undefined,
        progress:         0,
        lastModified:     now,
        modifiedBy:       '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        status–°ommunity:  'connected',
        statusNestedCard: 'green',
        statusNestedText: '',
        nickname:         '',
        membersCountNested: '',
        adminType:        'admin',
      };

      try {
    const response = await rafflesApi.createRaffleCard(payload) as { raffle: RaffleCard };
    setDraftId(response.raffle.raffleId);
    console.log('–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω, ID =', response.raffle.raffleId);
    } catch (err) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫:', err);
    } 
    };

    createDraft();
  }, []); // –ø—É—Å—Ç–æ–π deps ‚Üí –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑

  // 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–µ–±–∞—É–Ω—Å-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è patch
  const debouncedUpdate = useRef(
    debounce(async (id: string, data: CreateRaffleRequest) => {
      console.log('‚è≥ PUT updateRaffle', id, data);
      try {
        const { raffle } = await rafflesApi.updateRaffle(id, data);
        console.log('‚úÖ Update successful', raffle);
      } catch (err) {
        console.error('‚ùå Update error', err);
      }
    }, debounceMs)
  ).current;

  // 3) –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ formData —à–ª—ë–º –ø–æ–ª–Ω—ã–π PUT (—Ç—Ä–µ–±—É–µ—Ç –≤–µ—Å—å CreateRaffleRequest)
  useEffect(() => {
    if (!draftId) return;
    console.log('üìù formData –∏–∑–º–µ–Ω–∏–ª—Å—è:', formData);

    const now = new Date().toLocaleString('ru-RU', {
      day: '2-digit', month: '2-digit', year: 'numeric',
      hour: '2-digit', minute: '2-digit'
    });

    const payload: CreateRaffleRequest = {
      raffleId:         draftId,
      name:             formData.giveawayName,
      textRaffleState:  '–ê–∫—Ç–∏–≤–Ω–æ',
      winnersCount:     Number(formData.numberWinners) || 0,
      mode:             formData.endByParticipants ? 'members' : 'time',
      memberCount:      formData.memberMax || '',
      timeLeft:         '',
      progress:         0,  // –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—ë –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
      lastModified:     now,
      modifiedBy:       '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      status–°ommunity:  'connected',
      statusNestedCard: 'green',
      statusNestedText: '',
      nickname:         '',  // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å `@${‚Ä¶}`
      membersCountNested:'',
      adminType:        'admin',
    };

    debouncedUpdate(draftId, payload);
  }, [draftId, formData, debouncedUpdate]);

  // 4) –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî ¬´—Å–ª–∏–≤–∞–µ–º¬ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤
  useEffect(() => {
    return () => {
      debouncedUpdate.flush();
    };
  }, [debouncedUpdate]);

  return draftId;
}